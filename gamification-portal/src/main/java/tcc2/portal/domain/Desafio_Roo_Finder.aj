// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package tcc2.portal.domain;

import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;
import tcc2.portal.domain.Desafio;
import tcc2.portal.domain.Dificuldade;

privileged aspect Desafio_Roo_Finder {
    
    public static Long Desafio.countFindDesafiosByDificuldade(Dificuldade dificuldade) {
        if (dificuldade == null) throw new IllegalArgumentException("The dificuldade argument is required");
        EntityManager em = Desafio.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Desafio AS o WHERE o.dificuldade = :dificuldade", Long.class);
        q.setParameter("dificuldade", dificuldade);
        return ((Long) q.getSingleResult());
    }
    
    public static Long Desafio.countFindDesafiosByNomeDesafioLike(String nomeDesafio) {
        if (nomeDesafio == null || nomeDesafio.length() == 0) throw new IllegalArgumentException("The nomeDesafio argument is required");
        nomeDesafio = nomeDesafio.replace('*', '%');
        if (nomeDesafio.charAt(0) != '%') {
            nomeDesafio = "%" + nomeDesafio;
        }
        if (nomeDesafio.charAt(nomeDesafio.length() - 1) != '%') {
            nomeDesafio = nomeDesafio + "%";
        }
        EntityManager em = Desafio.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Desafio AS o WHERE LOWER(o.nomeDesafio) LIKE LOWER(:nomeDesafio)", Long.class);
        q.setParameter("nomeDesafio", nomeDesafio);
        return ((Long) q.getSingleResult());
    }
    
    public static TypedQuery<Desafio> Desafio.findDesafiosByDificuldade(Dificuldade dificuldade) {
        if (dificuldade == null) throw new IllegalArgumentException("The dificuldade argument is required");
        EntityManager em = Desafio.entityManager();
        TypedQuery<Desafio> q = em.createQuery("SELECT o FROM Desafio AS o WHERE o.dificuldade = :dificuldade", Desafio.class);
        q.setParameter("dificuldade", dificuldade);
        return q;
    }
    
    public static TypedQuery<Desafio> Desafio.findDesafiosByDificuldade(Dificuldade dificuldade, String sortFieldName, String sortOrder) {
        if (dificuldade == null) throw new IllegalArgumentException("The dificuldade argument is required");
        EntityManager em = Desafio.entityManager();
        String jpaQuery = "SELECT o FROM Desafio AS o WHERE o.dificuldade = :dificuldade";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        TypedQuery<Desafio> q = em.createQuery(jpaQuery, Desafio.class);
        q.setParameter("dificuldade", dificuldade);
        return q;
    }
    
    public static TypedQuery<Desafio> Desafio.findDesafiosByNomeDesafioLike(String nomeDesafio) {
        if (nomeDesafio == null || nomeDesafio.length() == 0) throw new IllegalArgumentException("The nomeDesafio argument is required");
        nomeDesafio = nomeDesafio.replace('*', '%');
        if (nomeDesafio.charAt(0) != '%') {
            nomeDesafio = "%" + nomeDesafio;
        }
        if (nomeDesafio.charAt(nomeDesafio.length() - 1) != '%') {
            nomeDesafio = nomeDesafio + "%";
        }
        EntityManager em = Desafio.entityManager();
        TypedQuery<Desafio> q = em.createQuery("SELECT o FROM Desafio AS o WHERE LOWER(o.nomeDesafio) LIKE LOWER(:nomeDesafio)", Desafio.class);
        q.setParameter("nomeDesafio", nomeDesafio);
        return q;
    }
    
    public static TypedQuery<Desafio> Desafio.findDesafiosByNomeDesafioLike(String nomeDesafio, String sortFieldName, String sortOrder) {
        if (nomeDesafio == null || nomeDesafio.length() == 0) throw new IllegalArgumentException("The nomeDesafio argument is required");
        nomeDesafio = nomeDesafio.replace('*', '%');
        if (nomeDesafio.charAt(0) != '%') {
            nomeDesafio = "%" + nomeDesafio;
        }
        if (nomeDesafio.charAt(nomeDesafio.length() - 1) != '%') {
            nomeDesafio = nomeDesafio + "%";
        }
        EntityManager em = Desafio.entityManager();
        String jpaQuery = "SELECT o FROM Desafio AS o WHERE LOWER(o.nomeDesafio) LIKE LOWER(:nomeDesafio)";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        TypedQuery<Desafio> q = em.createQuery(jpaQuery, Desafio.class);
        q.setParameter("nomeDesafio", nomeDesafio);
        return q;
    }
    
}
